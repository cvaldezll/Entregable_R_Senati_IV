nrow=5,
ncol=2,
dimnames=list(ciudades_visitar, c("Máxima","Mínima"))
)
print(temperaturas)
clima <- array(dim = c(5, 12, 2),
dimnames = list(ciudades_visitar, month.name, c("Temperatura","Precipitación"))
)
clima[,, "Temperatura"] <- sample(10:35, 60, replace=TRUE) # temperaturas entre 10 y 35 grados
print(temperaturas[,,temperaturas])
print(temperaturas[,,temperatura])
print(temperaturas[,,"Temperatura"])
print(clima[,,"Temperatura"])
clima[,, "Precipitación"] <- sample(0:100, 60, replace=TRUE) # precipitación entre 0 y 100 mm
print(clima[,,"Precipitación"])
df_ciudades <- data.frame(ciudad = c("Nueva York", "Los Angeles", "Chicago", "Houston"),
estado = c("Nueva York", "California", "Illinois", "Texas"),
costo_vida = c(3.5, 2.8, 2.5, 2.0),
tasa_criminalidad = c(400, 350, 500, 450),
clima = c("Templado", "Mediterráneo", "Continental", "Subtropical")
)
print(df_ciudades)
df_estados <- data.frame(estado = c("California", "Texas", "Florida", "Nueva York"),
poblacion = c(39.2e6, 29.0e6, 21.4e6, 19.4e6),
pib = c(3.2e12, 1.8e12, 1.1e12, 1.7e12),
sistema_educativo = c("Bueno","Regular","Bueno","Excelente")
)
print(df_estados)
print(df_ciudades$estado)
print(df_ciudades[estado])
print(df_ciudades["estado"])
print(df_ciudades[3,])
print(df_ciudades[2,3])
head(df_ciudades)
tail(df_ciudades)
str(df_ciudades)
str(df_ciudades)
summary(df_ciudades$costo_vida)
table(df_ciudades$clima)
hist(df_estados$poblacion)
view(df_ciudades)
View(df_ciudades)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("dslabs")
install.packages("dslabs")
library(dslabs)
data(murders)
murders %>% select(state, populations, total)
library(dslabs)
data(murders)
# Pipeline
murders %>% select(state, populations, total)
print(murders)
murders %>% select(state, population, total)
murders
murders %>% select(state, population, total)
murders %>% select(state, population, total)
tidyverse::murders %>% select(state, population, total)
dslabs::murders %>% select(state, population, total)
print(murders)
install.packages("tidyverse")
install.packages("dslabs")
murders %>% select(state, population, total)
library(dplyr)
murders %>% select(state, population, total)
murders %>% select(state, population, total)
library(dslabs)
library(dplyr)
data("murders")
head("murders")
library(dslabs)
library(dplyr)
data("murders")
head(murders)
library(dslabs)
library(dplyr)
data("murders")
head(murders)
murders %>% filter(population > 1e6)
murders %>% filter(population > 1e6) %>%
arrange(desc(population))
murders %>% filter(population > 1e6) %>%
arrange(desc(population))
murders %>% filter(population > 1e6) %>%
arrange(desc(population)) %>%
select(state, population)
murders %>%
mutate(rate = total/population*100000) %>%
select(state, region, rate) %>%
arrange(desc(rate))
murders %>%
mutate(rate = total/population*100000) %>%
group_by(region)
murders %>%
mutate(rate = total/population*100000) %>%
group_by(region) %>%
summarise(avg_rate = mean(rate))
head(murders %>% select(state, population, total))
murders %>%
select(state, population, total) %>%
head()
murders %>%
mutate(rate = total/population*100000) %>%
filter(ratio<1 & region=="West")
murders %>%
mutate(ratio = total/population*100000) %>%
filter(ratio<1 & region=="West")
murders %>%
summarise(media_poblacion = mean(population))
murders
murders %>%
group_by(state) %>%
summarise(avg_rate = mean(total)) %>%
arrange(desc(avg_rate)
murders
head(murders)
murders %>%
mutate(rate = total/population*1e6)
group_by(state) %>%
summarise(avg_rate = mean(rate)) %>%
arrange(desc(avg_rate)
head(murders)
head(murders)
murders %>%
mutate(rate = total/population*1e6)
group_by(state) %>%
summarise(avg_rate = mean(rate)) %>%
arrange(desc(avg_rate))
murders %>%
mutate(rate = total/population*1e6)
group_by(state) %>%
summarise(avg_rate = mean(rate))
murders %>%
mutate(rate = total/population*1e6) %>%
group_by(state) %>%
summarise(avg_rate = mean(rate)) %>%
arrange(desc(avg_rate))
murders %>%
mutate(rate = total/population*1e6) %>%
group_by(state) %>%
summarise(avg_rate = mean(rate)) %>%
arrange(desc(avg_rate))
eje_x <- murders$population
eje_y <- murders$total
plot(eje_x, eje_y)
head(murders)
hist(murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio))
murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio)
hist(murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio))
murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio)
hist(murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio))
murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio)
murders_ratio <- murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio)
hist(murders_ratio)
murders_ratio <- murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio)
murders_ratio <- murders %>%
mutate(ratio = total/population*1e6) %>%
select(ratio)
hist(murders_ratio%ratio)
murders_ratio <- murders %>%
mutate(ratio = total/population*1e6)
hist(murders_ratio)
hist(murders_ratio$ratio)
head(murders_ratio)
data("heights")
head(heights)
heights %>%
mutate(estatura = heights/39.37)
head(heights)
heights %>%
mutate(estatura = height/39.37)
head(heights)
heights %>%
mutate(estatura = height/39.37) %>%
head()
estaturas <- heights %>%
mutate(estatura = height/39.37)
promedio <- mean(estaturas$estatura)
desv_est <- sd(estaturas$estatura)
head(promedio)
head(desv_est)
promedio
desv_est
estaturas_hom <- estaturas %>%
filter(sex=="Male") %>%
summarize(promedio = mean(estatura), desv_est = sd(estatura))
class(estaturas_hom)
library(tibble)
tb <- tibble(
id = 1:3,
nombre = c("Luis", "Ana", "Carlos"),
edad = c(25, 30, 28)
)
tb
big_df <- data.frame(x = 1:1000, y = rnorm(1000))
head(big_df)
big_tb <- as_tibble(big_df)
head(big_tb)
big_tb
big_df$apellido
big_tb$apellido
df <- data.frame(x = 1:3, letters[1:3])
df
tb <- as_tibble(df)
tb
class(tb)
data("iris")
tb_iris <- as_tibble(iris)
tb_iris
install.packages("janitor")
library(janitor)
setwd("d:/Dropbox/Estudios SENATI/4to Semestre/Lenguaje de Programación para Ciencia de Datos/Entregable/")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
print("Total reservas:")
datos %>%
summarise(
total_reservas = n()
)
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
# EL GRAFICO
grafico <- ggplot(
datos_pastel,
#aes(x = "", y = porcentaje, fill = booking_status)
aes(x = "", y = porcentaje, fill = paste0(booking_status," ",etiqueta_porc))
) +
# Capa de Geometría (barras)
geom_bar(stat = "identity", width = 1) +
# Capa de Coordenadas (convierte a pastel)
coord_polar("y", start = 0) +
# Capa de Etiquetas (solo el porcentaje)
#geom_text(aes(y = posicion_y, label = etiqueta_porc), color = "black") +
# Etiquetas y limpieza básica de ejes
labs(
title = "Distribución de Estados de Reserva",
x = NULL, y = NULL,
fill = "Estado"
) +
# Tema: Elimina todos los elementos no esenciales
theme_void()
# EL GRAFICO
grafico <- ggplot(
datos_pastel,
#aes(x = "", y = porcentaje, fill = booking_status)
aes(x = "", y = porcentaje, fill = paste0(booking_status," ",etiqueta_porc))
) +
# Capa de Geometría (barras)
geom_bar(stat = "identity", width = 1) +
# Capa de Coordenadas (convierte a pastel)
coord_polar("y", start = 0) +
# Capa de Etiquetas (solo el porcentaje)
#geom_text(aes(y = posicion_y, label = etiqueta_porc), color = "black") +
# Etiquetas y limpieza básica de ejes
labs(
title = "Distribución de Estados de Reserva",
x = NULL, y = NULL,
fill = "Estado"
) +
# Tema: Elimina todos los elementos no esenciales
theme_void()
# EL GRAFICO
grafico <- ggplot(
datos_pastel,
#aes(x = "", y = porcentaje, fill = booking_status)
aes(x = "", y = porcentaje, fill = paste0(booking_status," ",etiqueta_porc))
) +
# Capa de Geometría (barras)
geom_bar(stat = "identity", width = 1) +
# Capa de Coordenadas (convierte a pastel)
coord_polar("y", start = 0) +
# Capa de Etiquetas (solo el porcentaje)
#geom_text(aes(y = posicion_y, label = etiqueta_porc), color = "black") +
# Etiquetas y limpieza básica de ejes
labs(
title = "Distribución de Estados de Reserva",
x = NULL, y = NULL,
fill = "Estado"
) +
# Tema: Elimina todos los elementos no esenciales
theme_void()
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
# --->>> CUSTOMER RATINGS - VALORACIONES DE LOS CLIENTES <<<---
# Agrupamiento por vehicle_type y cálculo del promedio de customer_rating
resultados_plyr <- ddply(
.data = datos,
.variables = .(vehicle_type), # Columna para agrupar (agrupamiento)
.fun = summarise,
promedio_rating = mean(customer_rating, na.rm = TRUE) # Nueva columna con el cálculo
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("revenue.R")
# Imprime el resultado
#print(resultados_pivotados)
knitr::kable(
resultados_pivotados,
caption = "VALORACIONES DE LOS CLIENTES"
)
# --->>> DRIVER RATINGS - CALIFICACIONES DE LOS CONDUCTORES <<<---
resultados_dplyr2 <- datos %>%
group_by(vehicle_type) %>%
summarise(
promedio_rating = mean(driver_ratings, na.rm = TRUE)
)
# Imprime el resultado
print("hola")
source("usar_librerias.R")
source("cargar_data.R")
source("revenue.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes"
)
knitr::kable(
resultados_pivotados2,
caption = "Valorización de los Conductores"
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
)
knitr::kable(
resultados_pivotados2,
caption = "Valorización de los Conductores"
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
)
knitr::kable(
resultados_pivotados2,
caption = "Valorización de los Conductores"
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
digits = 3
)
knitr::kable(
resultados_pivotados2,
caption = "Valorización de los Conductores"
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
digits = 3,
format = "html" # Usa el formato HTML para un mejor estilo por defecto
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
digits = 3,
format = "markdown" # Usa el formato HTML para un mejor estilo por defecto
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
digits = 3,
format = "markdown" # Usa el formato HTML para un mejor estilo por defecto
)
source("usar_librerias.R")
source("cargar_data.R")
source("overall.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
digits = 3,
format = "html" # Usa el formato HTML para un mejor estilo por defecto
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
knitr::kable(
resultados_pivotados,
caption = "Valorización de los Clientes",
format = "pipe", # Esto fuerza un formato Markdown más estructurado (con líneas)
align = "c",     # Alinea las columnas al centro (usa "l" para izquierda o "r" para derecha)
digits = 3
)
knitr::kable(
resultados_pivotados2,
caption = "Valorización de los Conductores"
)
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
source("usar_librerias.R")
source("cargar_data.R")
source("ratings.R")
